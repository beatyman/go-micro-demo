// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/demo-server.proto

package example

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Example service

func NewExampleEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Example service

type ExampleService interface {
	Call(ctx context.Context, in *CallRequest, opts ...client.CallOption) (*CallResponse, error)
	ClientStream(ctx context.Context, opts ...client.CallOption) (Example_ClientStreamService, error)
	ServerStream(ctx context.Context, in *ServerStreamRequest, opts ...client.CallOption) (Example_ServerStreamService, error)
	BidiStream(ctx context.Context, opts ...client.CallOption) (Example_BidiStreamService, error)
}

type exampleService struct {
	c    client.Client
	name string
}

func NewExampleService(name string, c client.Client) ExampleService {
	return &exampleService{
		c:    c,
		name: name,
	}
}

func (c *exampleService) Call(ctx context.Context, in *CallRequest, opts ...client.CallOption) (*CallResponse, error) {
	req := c.c.NewRequest(c.name, "Example.Call", in)
	out := new(CallResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exampleService) ClientStream(ctx context.Context, opts ...client.CallOption) (Example_ClientStreamService, error) {
	req := c.c.NewRequest(c.name, "Example.ClientStream", &ClientStreamRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	return &exampleServiceClientStream{stream}, nil
}

type Example_ClientStreamService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*ClientStreamRequest) error
}

type exampleServiceClientStream struct {
	stream client.Stream
}

func (x *exampleServiceClientStream) Close() error {
	return x.stream.Close()
}

func (x *exampleServiceClientStream) Context() context.Context {
	return x.stream.Context()
}

func (x *exampleServiceClientStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *exampleServiceClientStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *exampleServiceClientStream) Send(m *ClientStreamRequest) error {
	return x.stream.Send(m)
}

func (c *exampleService) ServerStream(ctx context.Context, in *ServerStreamRequest, opts ...client.CallOption) (Example_ServerStreamService, error) {
	req := c.c.NewRequest(c.name, "Example.ServerStream", &ServerStreamRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &exampleServiceServerStream{stream}, nil
}

type Example_ServerStreamService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*ServerStreamResponse, error)
}

type exampleServiceServerStream struct {
	stream client.Stream
}

func (x *exampleServiceServerStream) Close() error {
	return x.stream.Close()
}

func (x *exampleServiceServerStream) Context() context.Context {
	return x.stream.Context()
}

func (x *exampleServiceServerStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *exampleServiceServerStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *exampleServiceServerStream) Recv() (*ServerStreamResponse, error) {
	m := new(ServerStreamResponse)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (c *exampleService) BidiStream(ctx context.Context, opts ...client.CallOption) (Example_BidiStreamService, error) {
	req := c.c.NewRequest(c.name, "Example.BidiStream", &BidiStreamRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	return &exampleServiceBidiStream{stream}, nil
}

type Example_BidiStreamService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*BidiStreamRequest) error
	Recv() (*BidiStreamResponse, error)
}

type exampleServiceBidiStream struct {
	stream client.Stream
}

func (x *exampleServiceBidiStream) Close() error {
	return x.stream.Close()
}

func (x *exampleServiceBidiStream) Context() context.Context {
	return x.stream.Context()
}

func (x *exampleServiceBidiStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *exampleServiceBidiStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *exampleServiceBidiStream) Send(m *BidiStreamRequest) error {
	return x.stream.Send(m)
}

func (x *exampleServiceBidiStream) Recv() (*BidiStreamResponse, error) {
	m := new(BidiStreamResponse)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Example service

type ExampleHandler interface {
	Call(context.Context, *CallRequest, *CallResponse) error
	ClientStream(context.Context, Example_ClientStreamStream) error
	ServerStream(context.Context, *ServerStreamRequest, Example_ServerStreamStream) error
	BidiStream(context.Context, Example_BidiStreamStream) error
}

func RegisterExampleHandler(s server.Server, hdlr ExampleHandler, opts ...server.HandlerOption) error {
	type example interface {
		Call(ctx context.Context, in *CallRequest, out *CallResponse) error
		ClientStream(ctx context.Context, stream server.Stream) error
		ServerStream(ctx context.Context, stream server.Stream) error
		BidiStream(ctx context.Context, stream server.Stream) error
	}
	type Example struct {
		example
	}
	h := &exampleHandler{hdlr}
	return s.Handle(s.NewHandler(&Example{h}, opts...))
}

type exampleHandler struct {
	ExampleHandler
}

func (h *exampleHandler) Call(ctx context.Context, in *CallRequest, out *CallResponse) error {
	return h.ExampleHandler.Call(ctx, in, out)
}

func (h *exampleHandler) ClientStream(ctx context.Context, stream server.Stream) error {
	return h.ExampleHandler.ClientStream(ctx, &exampleClientStreamStream{stream})
}

type Example_ClientStreamStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*ClientStreamRequest, error)
}

type exampleClientStreamStream struct {
	stream server.Stream
}

func (x *exampleClientStreamStream) Close() error {
	return x.stream.Close()
}

func (x *exampleClientStreamStream) Context() context.Context {
	return x.stream.Context()
}

func (x *exampleClientStreamStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *exampleClientStreamStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *exampleClientStreamStream) Recv() (*ClientStreamRequest, error) {
	m := new(ClientStreamRequest)
	if err := x.stream.Recv(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (h *exampleHandler) ServerStream(ctx context.Context, stream server.Stream) error {
	m := new(ServerStreamRequest)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.ExampleHandler.ServerStream(ctx, m, &exampleServerStreamStream{stream})
}

type Example_ServerStreamStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*ServerStreamResponse) error
}

type exampleServerStreamStream struct {
	stream server.Stream
}

func (x *exampleServerStreamStream) Close() error {
	return x.stream.Close()
}

func (x *exampleServerStreamStream) Context() context.Context {
	return x.stream.Context()
}

func (x *exampleServerStreamStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *exampleServerStreamStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *exampleServerStreamStream) Send(m *ServerStreamResponse) error {
	return x.stream.Send(m)
}

func (h *exampleHandler) BidiStream(ctx context.Context, stream server.Stream) error {
	return h.ExampleHandler.BidiStream(ctx, &exampleBidiStreamStream{stream})
}

type Example_BidiStreamStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*BidiStreamResponse) error
	Recv() (*BidiStreamRequest, error)
}

type exampleBidiStreamStream struct {
	stream server.Stream
}

func (x *exampleBidiStreamStream) Close() error {
	return x.stream.Close()
}

func (x *exampleBidiStreamStream) Context() context.Context {
	return x.stream.Context()
}

func (x *exampleBidiStreamStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *exampleBidiStreamStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *exampleBidiStreamStream) Send(m *BidiStreamResponse) error {
	return x.stream.Send(m)
}

func (x *exampleBidiStreamStream) Recv() (*BidiStreamRequest, error) {
	m := new(BidiStreamRequest)
	if err := x.stream.Recv(m); err != nil {
		return nil, err
	}
	return m, nil
}
